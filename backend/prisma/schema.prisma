// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  // googleId  String?  @unique // Uncomment for Google SSO support
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  
  // RBAC relationships
  userRoles UserRole[]
  projects  Project[]
  
  // Audit relationships
  auditEvents AuditEvent[]
  
  // Page version relationships
  pageVersions PageVersion[]
  
  groupMemberships GroupMembership[]
  workflowVersions WorkflowVersion[]
  organizationMemberships OrganizationMembership[]
  settings Setting[]
}

model Role {
  id          String   @id @default(uuid())
  name        String   // Not unique globally, but unique per org
  description String?
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  
  // RBAC relationships
  userRoles UserRole[]
  permissions RolePermission[]
  
  // Role inheritance
  parentRoleId String?
  parentRole   Role?   @relation("RoleInheritance", fields: [parentRoleId], references: [id])
  childRoles   Role[]  @relation("RoleInheritance")
  
  groupRoles GroupRole[]
  
  // Org-scoping
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  
  @@unique([name, organizationId])
}

model Permission {
  id          String   @id @default(uuid())
  resource    String   // e.g., "project", "workflow", "datasource"
  action      String   // e.g., "read", "create", "update", "delete"
  description String?
  createdAt   DateTime @default(now())
  resourceId  String?  // Resource-level permission (optional)
  
  // RBAC relationships
  rolePermissions RolePermission[]
  
  @@unique([resource, action, resourceId])
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String
  assignedAt DateTime @default(now())
  resourceId String? // Resource-level assignment (optional)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  // Org-scoping
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  
  @@unique([userId, roleId, resourceId, organizationId])
  @@map("user_roles")
}

model RolePermission {
  id           String @id @default(uuid())
  roleId       String
  permissionId String
  grantedAt    DateTime @default(now())
  
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
}

model AuditEvent {
  id         String   @id @default(uuid())
  timestamp  DateTime @default(now())
  userId     String?
  userName   String?
  action     String   // e.g., "login", "create", "update", "delete"
  resource   String   // e.g., "project", "workflow", "user"
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  severity   String   @default("low") // low, medium, high, critical
  status     String   @default("success") // success, failure, warning
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Project {
  id          String        @id @default(uuid())
  name        String
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String
  config      Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt @default(now())
  pages       Page[]
  datasources Datasource[]
  workflows   Workflow[]
  integrations Integration[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  settings Setting[]
}

model Page {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  name      String
  layout    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  
  // Page version relationships
  versions PageVersion[]
}

model PageVersion {
  id        String   @id @default(uuid())
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId    String
  version   Int
  content   Json
  createdAt DateTime @default(now())
  createdBy User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?
  
  @@map("page_versions")
}

model Datasource {
  id        String          @id @default(uuid())
  project   Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  name      String
  type      DatasourceType
  config    Json
  schemaCache Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt @default(now())
}

model Workflow {
  id          String           @id @default(uuid())
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  name        String
  description String?
  trigger     TriggerType
  type        WorkflowType
  code        String
  logs        Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt @default(now())
  
  // Workflow triggers
  triggers WorkflowTrigger[]
  workflowVersions WorkflowVersion[]
}

model WorkflowTrigger {
  id         String        @id @default(uuid())
  workflow   Workflow      @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String
  type       TriggerType
  config     Json          // Configuration for the trigger (cron expression, webhook path, etc.)
  isActive   Boolean       @default(true)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt @default(now())
  
  @@unique([workflowId, type])
}

model Integration {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  name      String
  type      String // e.g., Database, REST, GraphQL
  config    Json
  status    String @default("Disconnected")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

enum DatasourceType {
  MySQL
  PostgreSQL
  REST
  GraphQL
  Python
  JS
}

enum TriggerType {
  cron
  manual
  webhook
  datasource
  api
}

enum WorkflowType {
  Python
  JavaScript
}

model Group {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt @default(now())
  memberships GroupMembership[]
  groupRoles  GroupRole[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
}

model GroupMembership {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  joinedAt  DateTime @default(now())

  @@unique([userId, groupId])
}

model GroupRole {
  id      String @id @default(uuid())
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  role    Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId  String
  assignedAt DateTime @default(now())

  // Org-scoping
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?

  @@unique([groupId, roleId, organizationId])
}

model WorkflowVersion {
  id          String   @id @default(uuid())
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String
  version     Int
  content     Json
  createdAt   DateTime @default(now())
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?

  @@unique([workflowId, version])
  @@map("workflow_versions")
}

model Organization {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  users       OrganizationMembership[]
  projects    Project[]
  groups      Group[]
  roles       Role[]
  userRoles   UserRole[]
  groupRoles  GroupRole[]
  settings Setting[]
}

model OrganizationMembership {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  role          String   // e.g., 'admin', 'member'
  joinedAt      DateTime @default(now())

  @@unique([userId, organizationId])
}

model Setting {
  id              String   @id @default(uuid())
  key             String
  value           Json
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String?
  project         Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt @default(now())

  @@unique([key, userId, organizationId, projectId])
}
